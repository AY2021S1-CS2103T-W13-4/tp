@startuml
!include style.puml

box Logic LOGIC_COLOR_T1
participant ":EditModuleCommand" as EditModuleCommand LOGIC_COLOR
participant "r:CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "m:Model" as Model MODEL_COLOR
participant ":TrackIter" as TrackIter MODEL_COLOR
end box

[-> EditModuleCommand : execute(m)
activate EditModuleCommand

'getModule
EditModuleCommand -> Model : getModule(code)
activate Model
Model -> TrackIter : getModuleList(code)
Model --> EditModuleCommand : moduleToEdit
deactivate Model
'end

'createEditedModule
EditModuleCommand -> EditModuleCommand : createEditedModule(moduleToEdit, editModuleDescriptor)
activate EditModuleCommand
EditModuleCommand --> EditModuleCommand : editedModule
deactivate EditModuleCommand
'end

alt editedModule.code != moduleToEdit.code
'getModuleTask
EditModuleCommand -> Model : getModuleTasks(code)
activate Model
Model -> Model : updateFilteredTaskList(pTask)
activate Model
Model --> Model
deactivate Model
note right
pTask: predicate to only shows tasks
that are associated with the module
end note
Model -> Model : getFilteredTaskList(pTask)
activate Model
Model --> Model : tasksToEdit
deactivate Model
Model --> EditModuleCommand : tasksToEdit
deactivate Model
'end

'edit tasks
loop task in tasksToEdit
    EditModuleCommand -> Model : setTask(oldTask,newTask)
    activate Model
    Model -> TrackIter : setTask(oldTask,newTask)
deactivate Model
end
'end

'getModuleLesson
EditModuleCommand -> Model : getModuleLessons(code)
activate Model
Model -> Model : updateFilteredLessonList(pLesson)
activate Model
Model --> Model
deactivate Model
note right
pLesson: predicate to only shows lessons
that are associated with the module
end note
Model -> Model : getFilteredLessonList(pLesson)
activate Model
Model --> Model : lessonsToEdit
deactivate Model
Model --> EditModuleCommand : lessonsToEdit
deactivate Model
'end

'edit lessons
loop lesson in lessonsToEdit
    EditModuleCommand -> Model : setLesson(oldLesson,newLesson)
    activate Model
    Model -> TrackIter : setLesson(oldLesson,newLesson)
deactivate Model
end
'end

'getModuleContact
EditModuleCommand -> Model : getModuleContacts(code)
activate Model
Model -> Model : updateFilteredContactList(pContact)
activate Model
Model --> Model
deactivate Model
note right
pContact: predicate to only shows contacts
that are associated with the module
end note
Model -> Model : getFilteredContactList(pContact)
activate Model
Model --> Model : contactsToEdit
deactivate Model
Model --> EditModuleCommand : contactsToEdit
deactivate Model
'end

'edit contacts
loop contact in contactsToEdit
    EditModuleCommand -> Model : setContact(oldContact,newContact)
    activate Model
    Model -> TrackIter : setContact(oldContact,newContact)
deactivate Model
end
'end

end


EditModuleCommand -> Model : editModule(t)
activate Model
Model -> TrackIter : editModule(t)

deactivate Model

create CommandResult
EditModuleCommand -> CommandResult
activate CommandResult

CommandResult --> EditModuleCommand : r
deactivate CommandResult

[<--EditModuleCommand : r
deactivate EditModuleCommand

@enduml
